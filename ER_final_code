#include <Wire.h>// master and slave communication library file   
//#include <util/atomic.h> For the ATOMIC_BLOCK macro which stores the position value when interrupt is working
#include <AccelStepper.h>
#define SLAVE_ADDRESS 0x01
char c;
unsigned int flag;
unsigned int f = 0;
unsigned int g = 0;
//Pin definitions
//Encoder pins for motor 1 & 2
//#define ENCA1 2 // Motor 1 - Brown 
//#define ENCB1 3 // Motor 1 - Black 
//#define ENCA2 18 // Motor 2 - Brown 
//#define ENCB2 19 // Motor 2 - Black 
//(Cytron)PWM pins & DIR pins for 1,2,3&4 motor
#define PWM1 4
#define DIR1 5
#define PWM2 6
#define DIR2 7
#define PWM3 8
#define DIR3 9
#define PWM4 10
#define DIR4 11

#define rly_em 22   // ELECTROMAGNET RELAY

#define PWM_1 14    // For linear actuator
#define PWM_2 15   // For Linear actuator

#define DIRC 12   //CIM MOTOR
#define PWM 13  //CIM MOTOR

#define LD_DIRC 2   //LOADING MOTOR
#define LD_PWM 3  //LOADING MOTOR

// Define a stepper motor 1 for arduino 
// direction Digital A1 (CW), pulses Digital A0 (CLK)

AccelStepper stepper(1, A0, A1); // define stepper motor parameters

float speeed = 140;
//float speeed1 = 0;

void receiveData(int byteCount) {
  while (Wire.available()) {
    c = Wire.read();
    Serial.println(c);
    if (c == 'W')
    {
        digitalWrite(PWM_1, HIGH);  //For linear actuator
        digitalWrite(PWM_2, LOW);    
    }
    
    else if(c == 'R')
    {        
      digitalWrite(PWM_1,LOW);   //For linear actuator
      digitalWrite(PWM_2, HIGH);
    }
    
    else if(c == 'Y')
    {
      analogWrite(PWM,speeed); //SIM MOTOR
      digitalWrite(DIRC,HIGH); // SIM MOTOR 
    }
    
    else if(c == 'Z')
    {
      analogWrite(PWM,speeed); //SIM MOTOR  
      digitalWrite(DIRC,LOW);     
    }
    
    else if(c == 'P')
    {
      flag = 1;
    }
     
    else if(c == 'A')
    {
      forward();
    }
    
    else if(c =='B')
    {
      right();
    }

    else if(c =='C')
    {
      left();
    }
    
    else if(c =='D')
    {
      backward();
    }
    
    else if(c =='E')
    {
       leftcrossfd();
    }
    
    else if(c =='F')
    {
        rightcrossfd();
    }

    else if(c =='G')
    {
       leftcrossbd();
    }
    
    else if(c =='H')
    {
       rightcrossbd();
    }
    
    else if(c =='N')   // Previous value 'N'
    {
       CWrotate();
    }
    
    else if(c =='M')  // Previous value 'M'
    {
       CCWrotate();
    }
//    else if(c == 'I')  // L2 PRESSED
//    {
//       tilt();
//    }
    
//    else if(c == 'O') //Circle pressed
//    {
//      pg_fd();
//    }
//    
//    else if(c == 'Q') //square released
//    {
//       pg_bc(); 
//    }
    
    else if(c == 'X') // Triangle pressed
    {
       
    }
//    else if(c == 'J')
//    {
//         pos = 0; 
//         myservo.attach(15);
//         myservo.write(pos);
//         myservo.detach();
//    }
    else
    {        
      analogWrite(PWM_1, LOW); //LINEAR ACTUATOR
      digitalWrite(PWM_2, LOW);
      analogWrite(PWM,LOW);//SIM MOTOR
      digitalWrite(DIRC,LOW);
      Stop();
    }
  }
}

void setup() {
  Wire.begin(SLAVE_ADDRESS);
  Wire.onReceive(receiveData);

  pinMode(rly_em, OUTPUT);
  pinMode(DIRC,OUTPUT);  // CYTRON
  pinMode(PWM,OUTPUT);
  analogWrite(PWM,LOW);
  digitalWrite(DIRC,LOW);
 
  pinMode(PWM_1, OUTPUT);  // LINEAR ACTUATOR CYTRON
  pinMode(PWM_2, OUTPUT);
  digitalWrite(PWM_1,LOW);  // LINEAR ACTUATOR
  analogWrite(PWM_2,LOW);

  pinMode(LD_PWM, OUTPUT);
  pinMode(LD_DIRC, OUTPUT);
  analogWrite(LD_PWM,0); // LOADING MOTOR
  digitalWrite(LD_DIRC,LOW); // LOADING MOTOR
  
  digitalWrite(rly_em,LOW); // ON Electromagnet
  Serial.begin(57600);
  pinMode(PWM1,OUTPUT);
  pinMode(DIR1,OUTPUT);
  pinMode(PWM2,OUTPUT);
  pinMode(DIR2,OUTPUT);
  pinMode(PWM3, OUTPUT);
  pinMode(DIR3, OUTPUT);
  pinMode(PWM4, OUTPUT);
  pinMode(DIR4, OUTPUT);

  stepper.setMaxSpeed(1100);//1100 Loading tilt stepper
  stepper.setAcceleration(1100);
}
//Function to receive data from master which get data from PS2 ctrller

//Interrupt for read encoder 1 (function call ISR)
//void readEncoder1(){
//  int b = digitalRead(ENCB1);
//  if(b > 0){
//    posi1++;
//  }
//  else{
//    posi1--;
//  }
//}

//Interrupt for read encoder (function call ISR)
//void readEncoder2(){
//  int c = digitalRead(ENCB2);
//  if(c > 0){
//    posi2++;
//  }
//  else{
//    posi2--;
//  }
//}

void Stop(){
  analogWrite(PWM1,LOW);//pwm value to the motor 1
  digitalWrite(DIR1,LOW);// direction to the motor
  analogWrite(PWM2,LOW);
  digitalWrite(DIR2,LOW);
  analogWrite(PWM3,LOW);
  digitalWrite(DIR3,LOW);
  analogWrite(PWM4,LOW);
  digitalWrite(DIR4,LOW);
  //Serial.println("stop");
}

void forward() {

 float pwm = 255;
 //Motor directions & pwm ctrl
  analogWrite(PWM1,pwm);//pwm value to the motor 1
  digitalWrite(DIR1,HIGH); //(inwards) clockwise
  analogWrite(PWM2,pwm);
  digitalWrite(DIR2,LOW);//(inwards) counter-clockwise
  analogWrite(PWM3,pwm);
  digitalWrite(DIR3,LOW);//(inwards) counter-clockwise
  analogWrite(PWM4,pwm);
  digitalWrite(DIR4,HIGH); //(inwards) clockwise
  //Serial.println("Move forward");
}

void backward() {
 // motor power
  float pwm = 255;
 //Motor directions & pwm ctrl
  analogWrite(PWM1,pwm);//pwm value to the motor 1
  digitalWrite(DIR1,LOW);//(inwards) counter-clockwise
  analogWrite(PWM2,pwm);
  digitalWrite(DIR2,HIGH);
  analogWrite(PWM3,pwm);
  digitalWrite(DIR3,HIGH);
  analogWrite(PWM4,pwm);
  digitalWrite(DIR4,LOW);//(inwards) counter-clockwise
  //Serial.println("Move backward");
  
}
void left() {
//motor power
  float pwm = 255;
 //Motor directions & pwm ctrl
  analogWrite(PWM1,pwm);//pwm value to the motor 1
  digitalWrite(DIR1,LOW);//(inwards) counter-clockwise
  analogWrite(PWM2,pwm);
  digitalWrite(DIR2,LOW);//(inwards) counter-clockwise
  analogWrite(PWM3,pwm);
  digitalWrite(DIR3,HIGH);
  analogWrite(PWM4,pwm);
  digitalWrite(DIR4,HIGH);
  //Serial.println("Move left");
}

void right() {
//motor power
  float pwm = 255;
 //Motor directions & pwm ctrl
  analogWrite(PWM1,pwm);//pwm value to the motor 1
  digitalWrite(DIR1,HIGH);// direction to the motor
  analogWrite(PWM2,pwm);
  digitalWrite(DIR2,HIGH);
  analogWrite(PWM3,pwm);
  digitalWrite(DIR3,LOW);//(inwards) counter-clockwise
  analogWrite(PWM4,pwm);
  digitalWrite(DIR4,LOW);//(inwards) counter-clockwise
  //Serial.println("Move right");
}

void leftcrossfd() {
//motor power
  float pwm = 255;
 //Motor directions & pwm ctrl
  analogWrite(PWM1,LOW);//pwm value to the motor 1
  digitalWrite(DIR1,LOW);// direction to the motor 1
  analogWrite(PWM2,pwm);//pwm value to the motor 2
  digitalWrite(DIR2,LOW);//(inwards) counter-clockwise
  analogWrite(PWM3,LOW);
  digitalWrite(DIR3,LOW);
  analogWrite(PWM4,pwm);
  digitalWrite(DIR4,HIGH);
  //Serial.println("Move leftcrossfd");
}

void rightcrossbd() {
//motor power
  float pwm = 255;
 //Motor directions & pwm ctrl
  analogWrite(PWM1,LOW);//pwm value to the motor 1
  digitalWrite(DIR1,LOW);// direction to the motor
  analogWrite(PWM2,pwm);
  digitalWrite(DIR2,HIGH);
  analogWrite(PWM3,LOW);
  digitalWrite(DIR3,LOW);
  analogWrite(PWM4,pwm);
  digitalWrite(DIR4,LOW);//(inwards) counter-clockwise
  //Serial.println("Move righttcoessbd");
}

void leftcrossbd() {
//motor power
  float pwm = 255;
 //Motor directions & pwm ctrl
  analogWrite(PWM1,pwm);//pwm value to the motor 1
  digitalWrite(DIR1,LOW);//(inwards) counter-clockwise
  analogWrite(PWM2,LOW);
  digitalWrite(DIR2,LOW);
  analogWrite(PWM3,pwm);
  digitalWrite(DIR3,HIGH);
  analogWrite(PWM4,LOW);
  digitalWrite(DIR4,LOW);
  //Serial.println("Move leftcrossdd");
}

void rightcrossfd() {
//motor power
  float pwm = 255;
 //Motor directions & pwm ctrl
  analogWrite(PWM1,pwm);//pwm value to the motor 1
  digitalWrite(DIR1,HIGH);// direction to the motor
  analogWrite(PWM2,LOW);
  digitalWrite(DIR2,LOW);
  analogWrite(PWM3,pwm);
  digitalWrite(DIR3,LOW);//(inwards) counter-clockwise
  analogWrite(PWM4,LOW);
  digitalWrite(DIR4,LOW);
  //Serial.println("Move rightcrossfd");
}

void CWrotate() {
//motor power
  float pwm = 255;
 //Motor directions & pwm ctrl
  analogWrite(PWM1,pwm);//pwm value to the motor 1
  digitalWrite(DIR1,HIGH);//(inwards) clockwise
  analogWrite(PWM2,pwm);
  digitalWrite(DIR2,HIGH);
  analogWrite(PWM3,pwm);
  digitalWrite(DIR3,HIGH);
  analogWrite(PWM4,pwm);
  digitalWrite(DIR4,HIGH);
  //Serial.println("Move CWrotate");
}

void CCWrotate() {
//motor power
  float pwm = 255;
 //Motor directions & pwm ctrl
  analogWrite(PWM1,pwm);//pwm value to the motor 1
  digitalWrite(DIR1,LOW);//(inwards) counter-clockwise
  analogWrite(PWM2,pwm);
  digitalWrite(DIR2,LOW);
  analogWrite(PWM3,pwm);
  digitalWrite(DIR3,LOW);
  analogWrite(PWM4,pwm);
  digitalWrite(DIR4,LOW);
  //Serial.println("Move CWrotate");
}

void tilt()
{
  if(f == 0)
  {
    stepper.runToNewPosition(10000);
    f = 1; 
  }
  else if(f == 1)
  {
   stepper.runToNewPosition(-10000); 
   f = 0; 
  }
  else
  {
    f = 0;
  }
}

void Load_rotate()
{
  if(g==0)
  {
      analogWrite(LD_PWM,255); // LOADING MOTOR
      digitalWrite(LD_DIRC,HIGH); // LOADING MOTOR
      delay(1000);
      analogWrite(LD_PWM,LOW); // LOADING MOTOR
      digitalWrite(LD_DIRC,LOW); // LOADING MOTOR  
      g=1;  
  }
  else if(g==1)
  {
      analogWrite(LD_PWM,255); // LOADING MOTOR
      digitalWrite(LD_DIRC,LOW); // LOADING MOTOR
      delay(1000);
      analogWrite(LD_PWM,LOW); // LOADING MOTOR
      digitalWrite(LD_DIRC,LOW); // LOADING MOTOR 
      g=0;    
  }
  else
  {
      analogWrite(LD_PWM,LOW); // LOADING MOTOR
      digitalWrite(LD_DIRC,LOW); // LOADING MOTOR 
      g = 0;    
  }
}

//void pg_fd()
//{
//      analogWrite(LD_PWM,255); // LOADING MOTOR
//      digitalWrite(LD_DIRC,HIGH); // LOADING MOTOR
//      delay(1000);
//      analogWrite(LD_PWM,LOW); // LOADING MOTOR
//      digitalWrite(LD_DIRC,LOW); // LOADING MOTOR 
//}
//
//void pg_bc()
//{
//      analogWrite(LD_PWM,255); // LOADING MOTOR
//      digitalWrite(LD_DIRC,LOW); // LOADING MOTOR
//      delay(1000);
//      analogWrite(LD_PWM,LOW); // LOADING MOTOR
//      digitalWrite(LD_DIRC,LOW); // LOADING MOTOR 
//}


void loop() {  
    if (flag == 1)
    {
       digitalWrite(rly_em, HIGH); 
       delay(1000); 
       digitalWrite(rly_em, LOW);
       flag = 0;
    }

//    if(c == 'O') //Circle pressed
//    {
//      //pg_fd();
//    }
//    
//    else if(c == 'Q') //square released
//    {
//       //pg_bc(); 
//    }
    if(c == 'I')  // L2 PRESSED  --> pgdc
    {
       Load_rotate();
    }
    
    else if(c == 'J')  // R2 PRESSED --> stepper
    {
       tilt();
    }

    else 
    {
//      analogWrite(LD_PWM,LOW); // LOADING MOTOR
//      digitalWrite(LD_DIRC,LOW); // LOADING MOTOR    
    }
}
